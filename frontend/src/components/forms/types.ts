import type { ReactNode } from "react";
import { FieldWrapperProps } from "./FieldWrapper";

export interface BaseFieldProps {
  /** Label to show above the field */
  label?: string | ReactNode;

  /** An optional error message */
  error?: string;

  /** Whether the input is disabled. */
  disabled?: boolean;

  /** Whether the input is required. */
  required?: boolean;

  /** Whether to show the error if there is any */
  showError?: boolean;

  /** Optional propperties passed to the fieldWrapper */
  fieldWrapperProps: Partial<FieldWrapperProps>;
}

// Properties of the input element wrapped by FieldWrapper

export interface FieldWrapperChildProps {
  /**
   * Whether the field has an error message. Can be used for styling.
   * Note that the actual error message itself is not passed on; that is
   * handled by `FieldWrapper`.
   */
  hasError?: boolean;

  /**
   * Id for the input element. This is used to relate the label
   * generated by `FieldWrapper` to the input element using `htmlFor={}`
   */
  id?: string;

  /**
   * The id of error message element. Provided by `FieldWrapper`.
   */
  ["aria-describedby"]: string;

  /**
   * Whether the component is invalid. Provided by `FieldWrapper`.
   */
  ["aria-invalid"]: boolean;
}

export interface FieldOption<Value> {
  /** The value of the option */
  value: Value;

  /** A label describing the value */
  label?: string | ReactNode;

  /** Whether it is disabled */
  disabled?: boolean;
}
