# Generated by Django 4.2.14 on 2024-08-07 14:30

from django.db import migrations
from django.core.files.base import File
from pathlib import Path


def migrate_block_content(apps, schema_editor):
    Block = apps.get_model("experiment", "Block")
    BlockTranslatedContent = apps.get_model("experiment", "BlockTranslatedContent")
    Phase = apps.get_model("experiment", "Phase")
    Experiment = apps.get_model("experiment", "Experiment")
    ExperimentTranslatedContent = apps.get_model("experiment", "ExperimentTranslatedContent")

    for block in Block.objects.all():
        language = block.language if hasattr(block, "language") and block.language else "en"

        BlockTranslatedContent.objects.create(
            block=block,
            language=language,
            name=block.name,
            description=block.description,
        )

        if block.phase:
            continue

        # Create a new experiment and phase for orphan blocks
        experiment = Experiment.objects.create(slug=block.slug)
        content = ExperimentTranslatedContent.objects.create(
            experiment=experiment,
            index=0,
            language=language,
            name=block.name,
            description=block.description,
        )

        try:
            # Attempt to add consent file
            rules = block.get_rules()
            consent_path = Path("experiment", "templates", rules.default_consent_file)
            with consent_path.open(mode="rb") as f:
                content.consent = File(f, name=consent_path.name)
                content.save()
        except Exception:
            # If there's an error, we'll just skip adding the consent file
            pass

        phase = Phase.objects.create(experiment=experiment, index=0, name=f"{block.name}_phase")
        block.phase = phase
        block.save()


def reverse_migrate_block_content(apps, schema_editor):
    Block = apps.get_model("experiment", "Block")
    BlockTranslatedContent = apps.get_model("experiment", "BlockTranslatedContent")
    Experiment = apps.get_model("experiment", "Experiment")
    ExperimentTranslatedContent = apps.get_model("experiment", "ExperimentTranslatedContent")
    Phase = apps.get_model("experiment", "Phase")

    for block in Block.objects.all():
        block_fallback_content = block.translated_contents.first()

        phase = block.phase
        experiment = phase.experiment if phase else None
        experiment_fallback_content = (
            ExperimentTranslatedContent.objects.filter(experiment=experiment).order_by("index").first()
            if experiment
            else None
        )

        if experiment_fallback_content:
            language = experiment_fallback_content.language
            possible_block_fallback_content = block.translated_contents.filter(language=language).first()
            if possible_block_fallback_content:
                block_fallback_content = possible_block_fallback_content

        if not block_fallback_content:
            continue

        block.name = block_fallback_content.name if block_fallback_content.name else block.slug
        block.description = block_fallback_content.description if block_fallback_content.description else ""
        if experiment_fallback_content and experiment_fallback_content.consent:
            block.consent = experiment_fallback_content.consent

        # Remove the created phase and experiment if they match the criteria
        if block.phase and block.phase.name == f"{block.name}_phase":
            phase = Phase.objects.get(pk=block.phase.id)
            experiment = Experiment.objects.get(pk=phase.experiment.id)
            block.phase = None
            block.save()
            phase.delete()
            experiment.delete()

        block.save()

    BlockTranslatedContent.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ("experiment", "0053_alter_block_options_rename_series_phase_experiments_and_more"),
    ]

    operations = [
        migrations.RunPython(migrate_block_content, reverse_migrate_block_content),
    ]
