# Generated by Django 4.2.18 on 2025-03-18 09:43

from django.db import migrations, transaction


class Migration(migrations.Migration):

    def delete_block_translated_contents(apps, schema_editor):
        BlockTranslatedContent = apps.get_model('experiment', 'BlockTranslatedContent')
        BlockTranslatedContent.objects.filter().exclude(language='cy').delete() # exclude Translated Content objects created in migration #0066

    def create_block_translated_contents(apps, schema_editor):
        Block = apps.get_model('experiment', 'Block')
        BlockTranslatedContent = apps.get_model('experiment', 'BlockTranslatedContent')
        for block in Block.objects.all():
            tc = BlockTranslatedContent.objects.get(block=block)
            for lang_code in ['en', 'nl', 'pt', 'zh_hans']:
                name = getattr(tc, f'name_{lang_code}', '')
                if name:
                    language = 'zh' if lang_code == 'zh_hans' else lang_code
                    try:
                        with transaction.atomic():
                            BlockTranslatedContent.objects.create(
                                block=block,
                                language=language,
                                name=name,
                                description=getattr(tc, f'description_{lang_code}'),
                            )
                    except:
                        pass

    def delete_experiment_translated_contents(apps, schema_editor):
        ExperimentTranslatedContent = apps.get_model(
            'experiment', 'ExperimentTranslatedContent'
        )
        ExperimentTranslatedContent.objects.filter().exclude(language='cy').delete() # exclude Translated Content objects created in migration #0066

    def create_experiment_translated_contents(apps, schema_editor):
        Experiment = apps.get_model('experiment', 'Experiment')
        ExperimentTranslatedContent = apps.get_model(
            'experiment', 'ExperimentTranslatedContent'
        )
        for experiment in Experiment.objects.all():
            tc = ExperimentTranslatedContent.objects.get(experiment=experiment)
            for lang_code in ['en', 'nl', 'pt', 'zh_hans']:
                name = getattr(tc, f'name_{lang_code}', '')
                index = 0 if tc.name == name else 1 # assign lowest index if main field is equal to language
                if name:
                    language = 'zh' if lang_code == 'zh_hans' else lang_code
                    try:
                        with transaction.atomic():
                            ExperimentTranslatedContent.objects.create(
                                experiment=experiment,
                                index=index,
                                language=language,
                                name=name,
                                description=getattr(tc, f'description_{lang_code}', ''),
                                consent=getattr(tc, f'consent_{lang_code}', ''),
                                about_content=getattr(tc, f'about_content_{lang_code}'),
                                social_media_message=getattr(
                                    tc, f'social_media_message_{lang_code}', ''
                                ),
                                disclaimer=getattr(tc, f'disclaimer_{lang_code}', ''),
                                privacy=getattr(tc, f'privacy_{lang_code}', ''),
                            )
                    except:
                        pass

    dependencies = [
        ('experiment', '0066_migrate_translation_data'),
    ]

    operations = [
        migrations.RunPython(delete_block_translated_contents, create_block_translated_contents),
        migrations.RunPython(delete_experiment_translated_contents, create_experiment_translated_contents)
    ]
