# Generated by Django 4.2.18 on 2025-03-18 13:48

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import experiment.models


class Migration(migrations.Migration):

    def populate_block_texts(apps, schema_editor):
        BlockText = apps.get_model('experiment', 'BlockText')
        BlockTranslatedContent = apps.get_model('experiment', 'BlockTranslatedContent')
        for btc in BlockTranslatedContent.objects.filter(language='cy'):
            bt = BlockText.objects.create(
                block=btc.block,
                name=btc.name,
                description=btc.description
            )
            for field in ['name', 'description']:
                for lang_code in ['en', 'nl', 'pt', 'zh_hans']:
                    setattr(bt, f'{field}_{lang_code}', getattr(btc, f'{field}_{lang_code}', ''))
            bt.save()

    def populate_block_translated_contents(apps, schema_editor):
        BlockText = apps.get_model('experiment', 'BlockText')
        BlockTranslatedContent = apps.get_model('experiment', 'BlockTranslatedContent')
        for bt in BlockText.objects.all():
            btc = BlockTranslatedContent.objects.create(
                block=bt.block,
                name=bt.name,
                description=bt.description
            )
            for field in ['name', 'description']:
                for lang_code in ['en', 'nl', 'pt', 'zh_hans']:
                    setattr(btc, f'{field}_{lang_code}', getattr(bt, f'{field}_{lang_code}', ''))
            btc.save()

    def populate_experiment_texts(apps, schema_editor):
        ExperimentText = apps.get_model('experiment', 'ExperimentText')
        ExperimentTranslatedContent = apps.get_model('experiment', 'ExperimentTranslatedContent')
        for etc in ExperimentTranslatedContent.objects.filter(language='cy'):
            et = ExperimentText.objects.create(
                experiment=etc.experiment,
                name=etc.name,
                description=etc.description,
                about_content=etc.about_content,
                consent=etc.consent,
                social_media_message=etc.social_media_message,
                disclaimer=etc.disclaimer,
                privacy=etc.privacy
            )
            for field in ['name', 'description', 'about_content', 'consent', 'social_media_message', 'disclaimer', 'privacy']:
                for lang_code in ['en', 'nl', 'pt', 'zh_hans']:
                    setattr(et, f'{field}_{lang_code}', getattr(etc, f'{field}_{lang_code}', ''))
            et.save()

    def populate_experiment_translated_contents(apps, schema_editor):
        ExperimentText = apps.get_model('experiment', 'ExperimentText')
        ExperimentTranslatedContent = apps.get_model('experiment', 'ExperimentTranslatedContent')
        for et in ExperimentText.objects.all():
            etc = ExperimentTranslatedContent.objects.create(
                experiment=et.experiment,
                name=et.name,
                description=et.description
            )
            for field in ['name', 'description', 'about_content', 'consent', 'social_media_message', 'disclaimer', 'privacy']:
                for lang_code in ['en', 'nl', 'pt', 'zh_hans']:
                    setattr(etc, f'{field}_{lang_code}', getattr(et, f'{field}_{lang_code}', ''))
            etc.save()

    dependencies = [
        ('experiment', '0067_delete_translated_contents'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlockText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=64)),
                ('name_en', models.CharField(default='', max_length=64, null=True)),
                ('name_nl', models.CharField(default='', max_length=64, null=True)),
                ('name_pt', models.CharField(default='', max_length=64, null=True)),
                ('name_zh_hans', models.CharField(default='', max_length=64, null=True)),
                ('description', models.TextField(blank=True, default='')),
                ('description_en', models.TextField(blank=True, default='', null=True)),
                ('description_nl', models.TextField(blank=True, default='', null=True)),
                ('description_pt', models.TextField(blank=True, default='', null=True)),
                ('description_zh_hans', models.TextField(blank=True, default='', null=True)),
                ('block', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='text', to='experiment.block')),
            ],
        ),
        migrations.CreateModel(
            name='ExperimentText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=64)),
                ('name_en', models.CharField(default='', max_length=64, null=True)),
                ('name_nl', models.CharField(default='', max_length=64, null=True)),
                ('name_pt', models.CharField(default='', max_length=64, null=True)),
                ('name_zh_hans', models.CharField(default='', max_length=64, null=True)),
                ('description', models.TextField(blank=True, default='')),
                ('description_en', models.TextField(blank=True, default='', null=True)),
                ('description_nl', models.TextField(blank=True, default='', null=True)),
                ('description_pt', models.TextField(blank=True, default='', null=True)),
                ('description_zh_hans', models.TextField(blank=True, default='', null=True)),
                ('consent', models.FileField(blank=True, default='', upload_to=experiment.models.consent_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['md', 'html'])])),
                ('consent_en', models.FileField(blank=True, default='', null=True, upload_to=experiment.models.consent_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['md', 'html'])])),
                ('consent_nl', models.FileField(blank=True, default='', null=True, upload_to=experiment.models.consent_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['md', 'html'])])),
                ('consent_pt', models.FileField(blank=True, default='', null=True, upload_to=experiment.models.consent_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['md', 'html'])])),
                ('consent_zh_hans', models.FileField(blank=True, default='', null=True, upload_to=experiment.models.consent_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['md', 'html'])])),
                ('about_content', models.TextField(blank=True, default='')),
                ('about_content_en', models.TextField(blank=True, default='', null=True)),
                ('about_content_nl', models.TextField(blank=True, default='', null=True)),
                ('about_content_pt', models.TextField(blank=True, default='', null=True)),
                ('about_content_zh_hans', models.TextField(blank=True, default='', null=True)),
                ('social_media_message', models.TextField(blank=True, default='I scored {points} points in {experiment_name}!', help_text='Content for social media sharing. Use {points} and {experiment_name} as placeholders.')),
                ('social_media_message_en', models.TextField(blank=True, default='I scored {points} points in {experiment_name}!', help_text='Content for social media sharing. Use {points} and {experiment_name} as placeholders.', null=True)),
                ('social_media_message_nl', models.TextField(blank=True, default='I scored {points} points in {experiment_name}!', help_text='Content for social media sharing. Use {points} and {experiment_name} as placeholders.', null=True)),
                ('social_media_message_pt', models.TextField(blank=True, default='I scored {points} points in {experiment_name}!', help_text='Content for social media sharing. Use {points} and {experiment_name} as placeholders.', null=True)),
                ('social_media_message_zh_hans', models.TextField(blank=True, default='I scored {points} points in {experiment_name}!', help_text='Content for social media sharing. Use {points} and {experiment_name} as placeholders.', null=True)),
                ('disclaimer', models.TextField(blank=True, default='')),
                ('disclaimer_en', models.TextField(blank=True, default='', null=True)),
                ('disclaimer_nl', models.TextField(blank=True, default='', null=True)),
                ('disclaimer_pt', models.TextField(blank=True, default='', null=True)),
                ('disclaimer_zh_hans', models.TextField(blank=True, default='', null=True)),
                ('privacy', models.TextField(blank=True, default='')),
                ('privacy_en', models.TextField(blank=True, default='', null=True)),
                ('privacy_nl', models.TextField(blank=True, default='', null=True)),
                ('privacy_pt', models.TextField(blank=True, default='', null=True)),
                ('privacy_zh_hans', models.TextField(blank=True, default='', null=True)),
                ('experiment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='text', to='experiment.experiment')),
            ],
        ),
        migrations.RunPython(populate_block_texts, populate_block_translated_contents),
        migrations.RunPython(populate_experiment_texts, populate_experiment_translated_contents),
        migrations.DeleteModel(
            name='BlockTranslatedContent',
        ),
        migrations.DeleteModel(
            name='ExperimentTranslatedContent',
        ),
    ]
